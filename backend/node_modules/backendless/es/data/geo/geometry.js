'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _spatialReferenceSystem = require('./spatial-reference-system');

var _spatialReferenceSystem2 = _interopRequireDefault(_spatialReferenceSystem);

var _geoJsonParser = require('./geo-json-parser');

var _geoJsonParser2 = _interopRequireDefault(_geoJsonParser);

var _wktParser = require('./wkt-parser');

var _wktParser2 = _interopRequireDefault(_wktParser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Geometry = function () {
  _createClass(Geometry, null, [{
    key: 'fromWKT',
    value: function fromWKT(wellKnownText, srs) {
      return new _wktParser2.default(srs).read(wellKnownText);
    }
  }, {
    key: 'fromGeoJSON',
    value: function fromGeoJSON(geoJSON, srs) {
      return new _geoJsonParser2.default(srs).read(geoJSON);
    }
  }]);

  function Geometry(srs) {
    _classCallCheck(this, Geometry);

    this.srs = srs || _spatialReferenceSystem2.default.DEFAULT;
  }

  _createClass(Geometry, [{
    key: 'getSRS',
    value: function getSRS() {
      return this.srs;
    }

    /**
     * @abstract
     * @description It is an abstract method and it must be overridden in an inherited class
     */

  }, {
    key: 'getGeojsonType',
    value: function getGeojsonType() {}

    /**
     * @abstract
     * @description It is an abstract method and it must be overridden in an inherited class
     */

  }, {
    key: 'getWktType',
    value: function getWktType() {}

    /**
     * @abstract
     * @description It is an abstract method and it must be overridden in an inherited class
     */

  }, {
    key: 'wktCoordinatePairs',
    value: function wktCoordinatePairs() {}

    /**
     * @abstract
     * @description It is an abstract method and it must be overridden in an inherited class
     */

  }, {
    key: 'jsonCoordinatePairs',
    value: function jsonCoordinatePairs() {}
  }, {
    key: 'asGeoJSON',
    value: function asGeoJSON() {
      return {
        type: this.getGeojsonType(),
        coordinates: this.jsonCoordinatePairs()
      };
    }
  }, {
    key: 'asWKT',
    value: function asWKT() {
      return this.getWktType() + '(' + this.wktCoordinatePairs() + ')';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return this.asGeoJSON();
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '\'' + this.asWKT() + '\'';
    }
  }]);

  return Geometry;
}();

exports.default = Geometry;