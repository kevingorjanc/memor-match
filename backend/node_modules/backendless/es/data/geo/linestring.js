'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _geometry = require('./geometry');

var _geometry2 = _interopRequireDefault(_geometry);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GEOJSON_TYPE = _constants.GeoTypes.LINE_STRING;
var WKT_TYPE = GEOJSON_TYPE.toUpperCase();

var LineString = function (_Geometry) {
  _inherits(LineString, _Geometry);

  function LineString(points, srs) {
    _classCallCheck(this, LineString);

    var _this = _possibleConstructorReturn(this, (LineString.__proto__ || Object.getPrototypeOf(LineString)).call(this, srs));

    _this.points = points || [];
    return _this;
  }

  _createClass(LineString, [{
    key: 'getPoints',
    value: function getPoints() {
      return this.points;
    }
  }, {
    key: 'setPoints',
    value: function setPoints(points) {
      this.points = points;

      return this;
    }

    /**
     * @override
     */

  }, {
    key: 'getGeojsonType',
    value: function getGeojsonType() {
      return GEOJSON_TYPE;
    }

    /**
     * @override
     */

  }, {
    key: 'getWktType',
    value: function getWktType() {
      return WKT_TYPE;
    }

    /**
     * @override
     */

  }, {
    key: 'jsonCoordinatePairs',
    value: function jsonCoordinatePairs() {
      var pointsArray = [];

      this.getPoints().forEach(function (point) {
        pointsArray.push([point.getX(), point.getY()]);
      });

      return pointsArray;
    }

    /**
     * @override
     */

  }, {
    key: 'wktCoordinatePairs',
    value: function wktCoordinatePairs() {
      return this.getPoints().map(function (point) {
        return point.getX() + ' ' + point.getY();
      }).join(',');
    }
  }]);

  return LineString;
}(_geometry2.default);

exports.default = LineString;