'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _geometry = require('./geometry');

var _geometry2 = _interopRequireDefault(_geometry);

var _linestring = require('./linestring');

var _linestring2 = _interopRequireDefault(_linestring);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GEOJSON_TYPE = _constants.GeoTypes.POLYGON;
var WKT_TYPE = GEOJSON_TYPE.toUpperCase();

var Polygon = function (_Geometry) {
  _inherits(Polygon, _Geometry);

  function Polygon(boundary, holes, srs) {
    _classCallCheck(this, Polygon);

    var _this = _possibleConstructorReturn(this, (Polygon.__proto__ || Object.getPrototypeOf(Polygon)).call(this, srs));

    _this.setBoundary(boundary);
    _this.setHoles(holes);
    return _this;
  }

  _createClass(Polygon, [{
    key: 'getBoundary',
    value: function getBoundary() {
      return this.boundary;
    }
  }, {
    key: 'setBoundary',
    value: function setBoundary(boundary) {
      if (!boundary) {
        throw new Error('The \'boundary\' argument is required.');
      }

      if (!(boundary instanceof _linestring2.default)) {
        boundary = new _linestring2.default(boundary, this.srs);
      }

      this.boundary = boundary;

      return this;
    }
  }, {
    key: 'getHoles',
    value: function getHoles() {
      return this.holes;
    }
  }, {
    key: 'setHoles',
    value: function setHoles(holes) {
      this.holes = holes || [];

      return this;
    }

    /**
     * @override
     */

  }, {
    key: 'getGeojsonType',
    value: function getGeojsonType() {
      return GEOJSON_TYPE;
    }

    /**
     * @override
     */

  }, {
    key: 'getWktType',
    value: function getWktType() {
      return WKT_TYPE;
    }

    /**
     * @override
     */

  }, {
    key: 'jsonCoordinatePairs',
    value: function jsonCoordinatePairs() {
      var outerBoundaries = [];

      this.getBoundary().getPoints().forEach(function (point) {
        outerBoundaries.push([point.getX(), point.getY()]);
      });

      var innerBoundaries = this.holes.map(function (hole) {
        return hole.getPoints().map(function (point) {
          return [point.getX(), point.getY()];
        });
      });

      return [outerBoundaries].concat(_toConsumableArray(innerBoundaries));
    }

    /**
     * @override
     */

  }, {
    key: 'wktCoordinatePairs',
    value: function wktCoordinatePairs() {
      var wktPairsListCollection = [this.getBoundary().wktCoordinatePairs()];

      this.holes.forEach(function (hole) {
        return wktPairsListCollection.push(hole.wktCoordinatePairs());
      });

      var wrapParens = function wrapParens(str) {
        return '(' + str + ')';
      };

      return wktPairsListCollection.map(wrapParens).join(',');
    }
  }]);

  return Polygon;
}(_geometry2.default);

exports.default = Polygon;