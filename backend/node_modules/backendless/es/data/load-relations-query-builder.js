'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _query = require('./query');

var _query2 = _interopRequireDefault(_query);

var _pagingQueryBuilder = require('./paging-query-builder');

var _pagingQueryBuilder2 = _interopRequireDefault(_pagingQueryBuilder);

var _utils = require('../utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LoadRelationsQueryBuilder = function () {
  _createClass(LoadRelationsQueryBuilder, null, [{
    key: 'create',
    value: function create() {
      return new LoadRelationsQueryBuilder();
    }
  }, {
    key: 'of',
    value: function of(RelationModel) {
      return new LoadRelationsQueryBuilder(RelationModel);
    }
  }]);

  function LoadRelationsQueryBuilder(RelationModel) {
    _classCallCheck(this, LoadRelationsQueryBuilder);

    this._query = new _query2.default();
    this._query.relationModel = RelationModel;

    this._paging = new _pagingQueryBuilder2.default();
  }

  _createClass(LoadRelationsQueryBuilder, [{
    key: 'setRelationName',
    value: function setRelationName(relationName) {
      this._query.setOption('relationName', relationName);

      return this;
    }
  }, {
    key: 'setPageSize',
    value: function setPageSize(pageSize) {
      this._paging.setPageSize(pageSize);

      return this;
    }
  }, {
    key: 'setOffset',
    value: function setOffset(offset) {
      this._paging.setOffset(offset);

      return this;
    }
  }, {
    key: 'prepareNextPage',
    value: function prepareNextPage() {
      this._paging.prepareNextPage();

      return this;
    }
  }, {
    key: 'preparePreviousPage',
    value: function preparePreviousPage() {
      this._paging.preparePreviousPage();

      return this;
    }
  }, {
    key: 'getProperties',
    value: function getProperties() {
      return this._query.properties;
    }
  }, {
    key: 'setProperties',
    value: function setProperties(properties) {
      this._query.properties = _utils2.default.castArray(properties);

      return this;
    }
  }, {
    key: 'addProperty',
    value: function addProperty(property) {
      this._query.addProperty(property);

      return this;
    }
  }, {
    key: 'getWhereClause',
    value: function getWhereClause() {
      return this._query.condition;
    }
  }, {
    key: 'setWhereClause',
    value: function setWhereClause(whereClause) {
      this._query.condition = whereClause;

      return this;
    }
  }, {
    key: 'getSortBy',
    value: function getSortBy() {
      return this._query.getOption('sortBy');
    }
  }, {
    key: 'setSortBy',
    value: function setSortBy(sortBy) {
      this._query.setOption('sortBy', _utils2.default.castArray(sortBy));

      return this;
    }
  }, {
    key: 'build',
    value: function build() {
      this._query.setOptions(this._paging.build());

      return this._query;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var source = {
        pageSize: this._paging.pageSize,
        offset: this._paging.offset,
        props: this._query.properties,
        where: this._query.condition,
        sortBy: this._query.options && this._query.options.sortBy
      };

      var target = {};

      if (source.pageSize > 0) {
        target.pageSize = source.pageSize;
      }

      if (source.offset > 0) {
        target.offset = source.offset;
      }

      if (Array.isArray(source.props) && source.props.length) {
        target.props = source.props;
      }

      if (source.where) {
        target.where = source.where;
      }

      if (source.sortBy) {
        target.sortBy = source.sortBy;
      }

      return target;
    }
  }]);

  return LoadRelationsQueryBuilder;
}();

exports.default = LoadRelationsQueryBuilder;