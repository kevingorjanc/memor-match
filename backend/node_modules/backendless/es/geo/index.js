'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _desc, _value, _class;

var _utils = require('../utils');

var _utils2 = _interopRequireDefault(_utils);

var _utils3 = require('./utils/index');

var _utils4 = _interopRequireDefault(_utils3);

var _decorators = require('../decorators/index');

var _constants = require('./constants');

var _trackerMonitor13 = require('./tracker-monitor/index');

var _trackerMonitor14 = _interopRequireDefault(_trackerMonitor13);

var _cluster = require('./cluster');

var _cluster2 = _interopRequireDefault(_cluster);

var _point = require('./point');

var _point2 = _interopRequireDefault(_point);

var _query = require('./query');

var _query2 = _interopRequireDefault(_query);

var _savePoint2 = require('./save-point');

var _addCategory2 = require('./add-category');

var _deleteCategory2 = require('./delete-category');

var _getCategories2 = require('./get-categories');

var _deletePoint2 = require('./delete-point');

var _getPointsCount = require('./get-points-count');

var _getClusterPoints2 = require('./get-cluster-points');

var _loadPoints = require('./load-points');

var _loadMetadata2 = require('./load-metadata');

var _relativeFind2 = require('./relative-find');

var _loadFencePoints = require('./load-fence-points');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

var Geo = (_dec = (0, _decorators.deprecated)('Backendless.Geo', 'Backendless.Geo.savePoint'), _dec2 = (0, _decorators.deprecated)('Backendless.Geo', 'Backendless.Geo.find'), _dec3 = (0, _decorators.deprecated)('Backendless.Geo', 'Backendless.Geo.loadMetadata'), _dec4 = (0, _decorators.deprecated)('Backendless.Geo', 'Backendless.Geo.getClusterPoints'), _dec5 = (0, _decorators.deprecated)('Backendless.Geo', 'Backendless.Geo.relativeFind'), _dec6 = (0, _decorators.deprecated)('Backendless.Geo', 'Backendless.Geo.addCategory'), _dec7 = (0, _decorators.deprecated)('Backendless.Geo', 'Backendless.Geo.getCategories'), _dec8 = (0, _decorators.deprecated)('Backendless.Geo', 'Backendless.Geo.deleteCategory'), _dec9 = (0, _decorators.deprecated)('Backendless.Geo', 'Backendless.Geo.deletePoint'), _dec10 = (0, _decorators.deprecated)('Backendless.Geo', 'Backendless.Geo.getFencePoints'), _dec11 = (0, _decorators.deprecated)('Backendless.Geo', 'Backendless.Geo.getGeopointCount'), _dec12 = (0, _decorators.deprecated)('Backendless.Geo', 'Backendless.Geo.runOnEnterAction'), _dec13 = (0, _decorators.deprecated)('Backendless.Geo', 'Backendless.Geo.runOnStayAction'), _dec14 = (0, _decorators.deprecated)('Backendless.Geo', 'Backendless.Geo.runOnExitAction'), _dec15 = (0, _decorators.deprecated)('Backendless.Geo', 'Backendless.Geo.startGeofenceMonitoringWithInAppCallback'), _dec16 = (0, _decorators.deprecated)('Backendless.Geo', 'Backendless.Geo.startGeofenceMonitoringWithRemoteCallback'), (_class = function () {
  function Geo(app) {
    _classCallCheck(this, Geo);

    this.app = app;
    this.trackerMonitor = new _trackerMonitor14.default(app);

    this.EARTH_RADIUS = _constants.EARTH_RADIUS;
    this.UNITS = _constants.UNITS;

    this.Utils = _utils4.default;
    this.Cluster = _cluster2.default;
    this.Point = _point2.default;
    this.Query = _query2.default;
  }

  /** @deprecated */


  _createClass(Geo, [{
    key: 'addPoint',
    value: function addPoint() /** geopoint, async */{
      return this.savePoint.apply(this, arguments);
    }
  }, {
    key: 'savePointSync',
    value: function savePointSync() {
      var _Utils$synchronized;

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return (_Utils$synchronized = _utils2.default.synchronized(_savePoint2.savePoint)).call.apply(_Utils$synchronized, [this].concat(args));
    }
  }, {
    key: 'savePoint',
    value: function savePoint() {
      var _Utils$promisified;

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return (_Utils$promisified = _utils2.default.promisified(_savePoint2.savePoint)).call.apply(_Utils$promisified, [this].concat(args));
    }
  }, {
    key: 'findSync',
    value: function findSync() {
      var _Utils$synchronized2;

      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return (_Utils$synchronized2 = _utils2.default.synchronized(_loadPoints.loadPoints)).call.apply(_Utils$synchronized2, [this].concat(args));
    }
  }, {
    key: 'find',
    value: function find() {
      var _Utils$promisified2;

      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return (_Utils$promisified2 = _utils2.default.promisified(_loadPoints.loadPoints)).call.apply(_Utils$promisified2, [this].concat(args));
    }
  }, {
    key: 'loadMetadataSync',
    value: function loadMetadataSync() {
      var _Utils$synchronized3;

      for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      return (_Utils$synchronized3 = _utils2.default.synchronized(_loadMetadata2.loadMetadata)).call.apply(_Utils$synchronized3, [this].concat(args));
    }
  }, {
    key: 'loadMetadata',
    value: function loadMetadata() {
      var _Utils$promisified3;

      for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      return (_Utils$promisified3 = _utils2.default.promisified(_loadMetadata2.loadMetadata)).call.apply(_Utils$promisified3, [this].concat(args));
    }
  }, {
    key: 'getClusterPointsSync',
    value: function getClusterPointsSync() {
      var _Utils$synchronized4;

      for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }

      return (_Utils$synchronized4 = _utils2.default.synchronized(_getClusterPoints2.getClusterPoints)).call.apply(_Utils$synchronized4, [this].concat(args));
    }
  }, {
    key: 'getClusterPoints',
    value: function getClusterPoints() {
      var _Utils$promisified4;

      for (var _len8 = arguments.length, args = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        args[_key8] = arguments[_key8];
      }

      return (_Utils$promisified4 = _utils2.default.promisified(_getClusterPoints2.getClusterPoints)).call.apply(_Utils$promisified4, [this].concat(args));
    }
  }, {
    key: 'relativeFindSync',
    value: function relativeFindSync() {
      var _Utils$synchronized5;

      for (var _len9 = arguments.length, args = Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        args[_key9] = arguments[_key9];
      }

      return (_Utils$synchronized5 = _utils2.default.synchronized(_relativeFind2.relativeFind)).call.apply(_Utils$synchronized5, [this].concat(args));
    }
  }, {
    key: 'relativeFind',
    value: function relativeFind() {
      var _Utils$promisified5;

      for (var _len10 = arguments.length, args = Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        args[_key10] = arguments[_key10];
      }

      return (_Utils$promisified5 = _utils2.default.promisified(_relativeFind2.relativeFind)).call.apply(_Utils$promisified5, [this].concat(args));
    }
  }, {
    key: 'addCategorySync',
    value: function addCategorySync() {
      var _Utils$synchronized6;

      for (var _len11 = arguments.length, args = Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
        args[_key11] = arguments[_key11];
      }

      return (_Utils$synchronized6 = _utils2.default.synchronized(_addCategory2.addCategory)).call.apply(_Utils$synchronized6, [this].concat(args));
    }
  }, {
    key: 'addCategory',
    value: function addCategory() {
      var _Utils$promisified6;

      for (var _len12 = arguments.length, args = Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
        args[_key12] = arguments[_key12];
      }

      return (_Utils$promisified6 = _utils2.default.promisified(_addCategory2.addCategory)).call.apply(_Utils$promisified6, [this].concat(args));
    }
  }, {
    key: 'getCategoriesSync',
    value: function getCategoriesSync() {
      var _Utils$synchronized7;

      for (var _len13 = arguments.length, args = Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
        args[_key13] = arguments[_key13];
      }

      return (_Utils$synchronized7 = _utils2.default.synchronized(_getCategories2.getCategories)).call.apply(_Utils$synchronized7, [this].concat(args));
    }
  }, {
    key: 'getCategories',
    value: function getCategories() {
      var _Utils$promisified7;

      for (var _len14 = arguments.length, args = Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
        args[_key14] = arguments[_key14];
      }

      return (_Utils$promisified7 = _utils2.default.promisified(_getCategories2.getCategories)).call.apply(_Utils$promisified7, [this].concat(args));
    }
  }, {
    key: 'deleteCategorySync',
    value: function deleteCategorySync() {
      var _Utils$synchronized8;

      for (var _len15 = arguments.length, args = Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
        args[_key15] = arguments[_key15];
      }

      return (_Utils$synchronized8 = _utils2.default.synchronized(_deleteCategory2.deleteCategory)).call.apply(_Utils$synchronized8, [this].concat(args));
    }
  }, {
    key: 'deleteCategory',
    value: function deleteCategory() {
      var _Utils$promisified8;

      for (var _len16 = arguments.length, args = Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {
        args[_key16] = arguments[_key16];
      }

      return (_Utils$promisified8 = _utils2.default.promisified(_deleteCategory2.deleteCategory)).call.apply(_Utils$promisified8, [this].concat(args));
    }
  }, {
    key: 'deletePointSync',
    value: function deletePointSync() {
      var _Utils$synchronized9;

      for (var _len17 = arguments.length, args = Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {
        args[_key17] = arguments[_key17];
      }

      return (_Utils$synchronized9 = _utils2.default.synchronized(_deletePoint2.deletePoint)).call.apply(_Utils$synchronized9, [this].concat(args));
    }
  }, {
    key: 'deletePoint',
    value: function deletePoint() {
      var _Utils$promisified9;

      for (var _len18 = arguments.length, args = Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {
        args[_key18] = arguments[_key18];
      }

      return (_Utils$promisified9 = _utils2.default.promisified(_deletePoint2.deletePoint)).call.apply(_Utils$promisified9, [this].concat(args));
    }
  }, {
    key: 'getFencePointsSync',
    value: function getFencePointsSync() {
      var _Utils$synchronized10;

      for (var _len19 = arguments.length, args = Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {
        args[_key19] = arguments[_key19];
      }

      return (_Utils$synchronized10 = _utils2.default.synchronized(_loadFencePoints.loadFencePoints)).call.apply(_Utils$synchronized10, [this].concat(args));
    }
  }, {
    key: 'getFencePoints',
    value: function getFencePoints() {
      var _Utils$promisified10;

      for (var _len20 = arguments.length, args = Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {
        args[_key20] = arguments[_key20];
      }

      return (_Utils$promisified10 = _utils2.default.promisified(_loadFencePoints.loadFencePoints)).call.apply(_Utils$promisified10, [this].concat(args));
    }
  }, {
    key: 'getGeopointCountSync',
    value: function getGeopointCountSync() {
      var _Utils$synchronized11;

      for (var _len21 = arguments.length, args = Array(_len21), _key21 = 0; _key21 < _len21; _key21++) {
        args[_key21] = arguments[_key21];
      }

      return (_Utils$synchronized11 = _utils2.default.synchronized(_getPointsCount.getGeopointCount)).call.apply(_Utils$synchronized11, [this].concat(args));
    }
  }, {
    key: 'getGeopointCount',
    value: function getGeopointCount() {
      var _Utils$promisified11;

      for (var _len22 = arguments.length, args = Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {
        args[_key22] = arguments[_key22];
      }

      return (_Utils$promisified11 = _utils2.default.promisified(_getPointsCount.getGeopointCount)).call.apply(_Utils$promisified11, [this].concat(args));
    }
  }, {
    key: 'runOnEnterActionSync',
    value: function runOnEnterActionSync() {
      var _trackerMonitor;

      return (_trackerMonitor = this.trackerMonitor).runOnEnterActionSync.apply(_trackerMonitor, arguments);
    }
  }, {
    key: 'runOnEnterAction',
    value: function runOnEnterAction() {
      var _trackerMonitor2;

      return (_trackerMonitor2 = this.trackerMonitor).runOnEnterAction.apply(_trackerMonitor2, arguments);
    }
  }, {
    key: 'runOnStayActionSync',
    value: function runOnStayActionSync() {
      var _trackerMonitor3;

      return (_trackerMonitor3 = this.trackerMonitor).runOnStayActionSync.apply(_trackerMonitor3, arguments);
    }
  }, {
    key: 'runOnStayAction',
    value: function runOnStayAction() {
      var _trackerMonitor4;

      return (_trackerMonitor4 = this.trackerMonitor).runOnStayAction.apply(_trackerMonitor4, arguments);
    }
  }, {
    key: 'runOnExitActionSync',
    value: function runOnExitActionSync() {
      var _trackerMonitor5;

      return (_trackerMonitor5 = this.trackerMonitor).runOnExitActionSync.apply(_trackerMonitor5, arguments);
    }
  }, {
    key: 'runOnExitAction',
    value: function runOnExitAction() {
      var _trackerMonitor6;

      return (_trackerMonitor6 = this.trackerMonitor).runOnExitAction.apply(_trackerMonitor6, arguments);
    }
  }, {
    key: 'startGeofenceMonitoringWithInAppCallbackSync',
    value: function startGeofenceMonitoringWithInAppCallbackSync() {
      var _trackerMonitor7;

      return (_trackerMonitor7 = this.trackerMonitor).startGeofenceMonitoringWithInAppCallbackSync.apply(_trackerMonitor7, arguments);
    }
  }, {
    key: 'startGeofenceMonitoringWithInAppCallback',
    value: function startGeofenceMonitoringWithInAppCallback() {
      var _trackerMonitor8;

      return (_trackerMonitor8 = this.trackerMonitor).startGeofenceMonitoringWithInAppCallback.apply(_trackerMonitor8, arguments);
    }
  }, {
    key: 'startGeofenceMonitoringWithRemoteCallbackSync',
    value: function startGeofenceMonitoringWithRemoteCallbackSync() {
      var _trackerMonitor9;

      return (_trackerMonitor9 = this.trackerMonitor).startGeofenceMonitoringWithRemoteCallbackSync.apply(_trackerMonitor9, arguments);
    }
  }, {
    key: 'startGeofenceMonitoringWithRemoteCallback',
    value: function startGeofenceMonitoringWithRemoteCallback() {
      var _trackerMonitor10;

      return (_trackerMonitor10 = this.trackerMonitor).startGeofenceMonitoringWithRemoteCallback.apply(_trackerMonitor10, arguments);
    }
  }, {
    key: 'stopGeofenceMonitoring',
    value: function stopGeofenceMonitoring() {
      var _trackerMonitor11;

      return (_trackerMonitor11 = this.trackerMonitor).stopGeofenceMonitoring.apply(_trackerMonitor11, arguments);
    }
  }, {
    key: 'resetGeofenceMonitoring',
    value: function resetGeofenceMonitoring() {
      var _trackerMonitor12;

      return (_trackerMonitor12 = this.trackerMonitor).reset.apply(_trackerMonitor12, arguments);
    }
  }]);

  return Geo;
}(), (_applyDecoratedDescriptor(_class.prototype, 'savePointSync', [_dec], Object.getOwnPropertyDescriptor(_class.prototype, 'savePointSync'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'findSync', [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, 'findSync'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'loadMetadataSync', [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, 'loadMetadataSync'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getClusterPointsSync', [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, 'getClusterPointsSync'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'relativeFindSync', [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, 'relativeFindSync'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'addCategorySync', [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, 'addCategorySync'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getCategoriesSync', [_dec7], Object.getOwnPropertyDescriptor(_class.prototype, 'getCategoriesSync'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'deleteCategorySync', [_dec8], Object.getOwnPropertyDescriptor(_class.prototype, 'deleteCategorySync'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'deletePointSync', [_dec9], Object.getOwnPropertyDescriptor(_class.prototype, 'deletePointSync'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getFencePointsSync', [_dec10], Object.getOwnPropertyDescriptor(_class.prototype, 'getFencePointsSync'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'getGeopointCountSync', [_dec11], Object.getOwnPropertyDescriptor(_class.prototype, 'getGeopointCountSync'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'runOnEnterActionSync', [_dec12], Object.getOwnPropertyDescriptor(_class.prototype, 'runOnEnterActionSync'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'runOnStayActionSync', [_dec13], Object.getOwnPropertyDescriptor(_class.prototype, 'runOnStayActionSync'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'runOnExitActionSync', [_dec14], Object.getOwnPropertyDescriptor(_class.prototype, 'runOnExitActionSync'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'startGeofenceMonitoringWithInAppCallbackSync', [_dec15], Object.getOwnPropertyDescriptor(_class.prototype, 'startGeofenceMonitoringWithInAppCallbackSync'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'startGeofenceMonitoringWithRemoteCallbackSync', [_dec16], Object.getOwnPropertyDescriptor(_class.prototype, 'startGeofenceMonitoringWithRemoteCallbackSync'), _class.prototype)), _class));
exports.default = Geo;