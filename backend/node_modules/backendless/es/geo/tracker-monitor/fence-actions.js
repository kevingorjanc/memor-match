'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require('../../utils');

var _utils2 = _interopRequireDefault(_utils);

var _async = require('../../request/async');

var _async2 = _interopRequireDefault(_async);

var _point = require('../point');

var _point2 = _interopRequireDefault(_point);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//TODO: refactor me

var GeoFenceActions = function () {
  function GeoFenceActions(app) {
    _classCallCheck(this, GeoFenceActions);

    this.app = app;
  }

  _createClass(GeoFenceActions, [{
    key: 'run',
    value: function run(action, geoFenceName, geoPoint, asyncHandler) {
      if (geoPoint instanceof _async2.default) {
        asyncHandler = geoPoint;
        geoPoint = undefined;
      }

      if (!_utils2.default.isString(geoFenceName)) {
        throw new Error("Invalid value for parameter 'geoFenceName'. Geo Fence Name must be a String");
      }

      if (geoPoint && !(geoPoint instanceof _point2.default) && !geoPoint.objectId) {
        throw new Error('Method argument must be a valid instance of GeoPoint persisted on the server');
      }

      return this.app.request.post({
        url: this.app.urls.geoFence(action, geoFenceName),
        isAsync: !!asyncHandler,
        data: geoPoint,
        asyncHandler: asyncHandler
      });
    }
  }, {
    key: 'enter',
    value: function enter(geoFenceName, geoPoint, asyncHandler) {
      return this.run('onenter', geoFenceName, geoPoint, asyncHandler);
    }
  }, {
    key: 'stay',
    value: function stay(geoFenceName, geoPoint, asyncHandler) {
      return this.run('onstay', geoFenceName, geoPoint, asyncHandler);
    }
  }, {
    key: 'exit',
    value: function exit(geoFenceName, geoPoint, asyncHandler) {
      return this.run('onexit', geoFenceName, geoPoint, asyncHandler);
    }
  }]);

  return GeoFenceActions;
}();

exports.default = GeoFenceActions;