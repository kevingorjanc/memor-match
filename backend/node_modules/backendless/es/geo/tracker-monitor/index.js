'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require('../../utils');

var _utils2 = _interopRequireDefault(_utils);

var _tracker = require('./tracker');

var _tracker2 = _interopRequireDefault(_tracker);

var _fenceActions = require('./fence-actions');

var _fenceActions2 = _interopRequireDefault(_fenceActions);

var _startMonitoring = require('./start-monitoring');

var _startMonitoring2 = _interopRequireDefault(_startMonitoring);

var _stopMonitoring = require('./stop-monitoring');

var _stopMonitoring2 = _interopRequireDefault(_stopMonitoring);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GeoTrackerMonitor = function () {
  function GeoTrackerMonitor(app) {
    _classCallCheck(this, GeoTrackerMonitor);

    this.app = app;
    this.geoFenceActions = new _fenceActions2.default(app);
    this.reset();
  }

  _createClass(GeoTrackerMonitor, [{
    key: 'reset',
    value: function reset() {
      delete this.geoTracker;

      this.geoTracker = new _tracker2.default();
    }
  }, {
    key: 'runOnEnterAction',
    value: function runOnEnterAction() {
      var _Utils$promisified;

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return (_Utils$promisified = _utils2.default.promisified(this.geoFenceActions.enter)).call.apply(_Utils$promisified, [this.geoFenceActions].concat(args));
    }
  }, {
    key: 'runOnEnterActionSync',
    value: function runOnEnterActionSync() {
      var _Utils$synchronized;

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return (_Utils$synchronized = _utils2.default.synchronized(this.geoFenceActions.enter)).call.apply(_Utils$synchronized, [this.geoFenceActions].concat(args));
    }
  }, {
    key: 'runOnStayAction',
    value: function runOnStayAction() {
      var _Utils$promisified2;

      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return (_Utils$promisified2 = _utils2.default.promisified(this.geoFenceActions.stay)).call.apply(_Utils$promisified2, [this.geoFenceActions].concat(args));
    }
  }, {
    key: 'runOnStayActionSync',
    value: function runOnStayActionSync() {
      var _Utils$synchronized2;

      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return (_Utils$synchronized2 = _utils2.default.synchronized(this.geoFenceActions.stay)).call.apply(_Utils$synchronized2, [this.geoFenceActions].concat(args));
    }
  }, {
    key: 'runOnExitAction',
    value: function runOnExitAction() {
      var _Utils$promisified3;

      for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      return (_Utils$promisified3 = _utils2.default.promisified(this.geoFenceActions.exit)).call.apply(_Utils$promisified3, [this.geoFenceActions].concat(args));
    }
  }, {
    key: 'runOnExitActionSync',
    value: function runOnExitActionSync() {
      var _Utils$synchronized3;

      for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      return (_Utils$synchronized3 = _utils2.default.synchronized(this.geoFenceActions.exit)).call.apply(_Utils$synchronized3, [this.geoFenceActions].concat(args));
    }
  }, {
    key: 'startGeofenceMonitoringWithInAppCallback',
    value: function startGeofenceMonitoringWithInAppCallback() {
      var _Utils$promisified4;

      for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }

      return (_Utils$promisified4 = _utils2.default.promisified(_startMonitoring2.default)).call.apply(_Utils$promisified4, [this].concat(args));
    }
  }, {
    key: 'startGeofenceMonitoringWithInAppCallbackSync',
    value: function startGeofenceMonitoringWithInAppCallbackSync() {
      var _Utils$synchronized4;

      for (var _len8 = arguments.length, args = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        args[_key8] = arguments[_key8];
      }

      return (_Utils$synchronized4 = _utils2.default.synchronized(_startMonitoring2.default)).call.apply(_Utils$synchronized4, [this].concat(args));
    }
  }, {
    key: 'startGeofenceMonitoringWithRemoteCallback',
    value: function startGeofenceMonitoringWithRemoteCallback() {
      var _Utils$promisified5;

      for (var _len9 = arguments.length, args = Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        args[_key9] = arguments[_key9];
      }

      return (_Utils$promisified5 = _utils2.default.promisified(_startMonitoring2.default)).call.apply(_Utils$promisified5, [this].concat(args));
    }
  }, {
    key: 'startGeofenceMonitoringWithRemoteCallbackSync',
    value: function startGeofenceMonitoringWithRemoteCallbackSync() {
      var _Utils$synchronized5;

      for (var _len10 = arguments.length, args = Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        args[_key10] = arguments[_key10];
      }

      return (_Utils$synchronized5 = _utils2.default.synchronized(_startMonitoring2.default)).call.apply(_Utils$synchronized5, [this].concat(args));
    }
  }, {
    key: 'stopGeofenceMonitoring',
    value: function stopGeofenceMonitoring() {
      for (var _len11 = arguments.length, args = Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
        args[_key11] = arguments[_key11];
      }

      return _stopMonitoring2.default.call.apply(_stopMonitoring2.default, [this].concat(args));
    }
  }, {
    key: 'getFences',
    value: function getFences(geoFence) {
      return this.app.request.get({
        url: this.app.urls.geoFences(geoFence)
      });
    }
  }]);

  return GeoTrackerMonitor;
}();

exports.default = GeoTrackerMonitor;