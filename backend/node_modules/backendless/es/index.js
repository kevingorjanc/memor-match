'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _backendlessRequest = require('backendless-request');

var _backendlessRequest2 = _interopRequireDefault(_backendlessRequest);

var _request = require('./request/index');

var _request2 = _interopRequireDefault(_request);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var _urls = require('./urls');

var _urls2 = _interopRequireDefault(_urls);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DEFAULT_PROPS = {
  appId: null,
  apiKey: null,
  serverURL: 'https://api.backendless.com',
  debugMode: false,
  standalone: false,
  ServerCode: null,
  XMLHttpRequest: typeof XMLHttpRequest !== 'undefined' ? XMLHttpRequest : undefined
};

var root = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) === 'object' && self.self === self && self || (typeof global === 'undefined' ? 'undefined' : _typeof(global)) === 'object' && global.global === global && global;

var previousBackendless = root && root.Backendless;

// Backendless supports two signatures for the initApp method
// two args - applicationId {String} and secretKey {String}
// or one argument - whole set of options {Object}
var parseInitConfig = function parseInitConfig() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var appId = args[0],
      apiKey = args[1];


  if (_utils2.default.isObject(appId)) {
    return appId;
  }

  return {
    appId: appId,
    apiKey: apiKey
  };
};

var SERVICES = {
  'Logging': function Logging() {
    return require('./logging/index').default;
  },
  'Counters': function Counters() {
    return require('./counters/index').default;
  },
  'Cache': function Cache() {
    return require('./cache/index').default;
  },
  'Commerce': function Commerce() {
    return require('./commerce/index').default;
  },
  'Users': function Users() {
    return require('./users/index').default;
  },
  'BL': function BL() {
    return require('./bl/index').default;
  },
  'Geo': function Geo() {
    return require('./geo/index').default;
  },
  'Data': function Data() {
    return require('./data/index').default;
  },
  'Messaging': function Messaging() {
    return require('./messaging/index').default;
  },
  'Files': function Files() {
    return require('./files/index').default;
  },
  'RT': function RT() {
    return require('./rt').default;
  },
  'SharedObject': function SharedObject() {
    return require('./rso/index').default;
  },
  'LocalCache': function LocalCache() {
    return require('./local-cache/index').default;
  }
};

var Backendless = function () {
  function Backendless(props) {
    _classCallCheck(this, Backendless);

    this.initConfig(props);

    this.Request = _backendlessRequest2.default;

    this.request = new _request2.default(this);
    this.urls = new _urls2.default(this);
  }

  /**
   * @param {Object} config
   */


  _createClass(Backendless, [{
    key: 'initConfig',
    value: function initConfig(config) {
      for (var key in DEFAULT_PROPS) {
        if (DEFAULT_PROPS.hasOwnProperty(key)) {
          var privateKey = '__' + key;

          var defaultValue = this[privateKey] === undefined ? DEFAULT_PROPS[key] : this[privateKey];

          this[privateKey] = config[key] === undefined ? defaultValue : config[key];
        }
      }
    }

    /**
     * @param {string|Object} appId|config
     * @param {string} [secretKey]
     * @returns {Backendless}
     */

  }, {
    key: 'initApp',
    value: function initApp() {
      var config = parseInitConfig.apply(undefined, arguments);

      var app = config.standalone ? new Backendless(this) : this;

      app.initConfig(config);

      app.resetRT();
      app.Logging.reset();
      app.Geo.resetGeofenceMonitoring();
      app.Users.setLocalCurrentUser();

      return app;
    }
  }, {
    key: '__getService',
    value: function __getService(name) {
      var privateName = '__' + name;

      if (!this[privateName]) {
        var Service = SERVICES[name]();

        this[privateName] = new Service(this);
      }

      return this[privateName];
    }

    ///--------SETTERS/GETTERS-------///

    ///--------standalone-------///

  }, {
    key: 'setupDevice',
    value: function setupDevice() {
      var _require = require('./device/index'),
          Device = _require.default;

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      this.__device = new (Function.prototype.bind.apply(Device, [null].concat(args)))();
    }

    ///----------UTIL METHODS--------///

  }, {
    key: 'getCurrentUserToken',
    value: function getCurrentUserToken() {
      return this.Users.getCurrentUserToken();
    }
  }, {
    key: 'noConflict',
    value: function noConflict() {
      if (root) {
        root.Backendless = previousBackendless;
      }

      return this;
    }

    ///-------------------------------------///
    ///-------------- SERVICES -------------///

  }, {
    key: 'resetRT',
    value: function resetRT() {
      if (this.__RT) {
        this.__RT.terminate();
        delete this.__RT;
      }
    }
  }, {
    key: 'standalone',
    get: function get() {
      return this.__standalone;
    },
    set: function set(standalone) {
      throw new Error('Setting value to Backendless.standalone directly is not possible, ' + ('instead you must use Backendless.initApp({ appId: [APP_ID], apiKey: [API_KEY], standalone: ' + standalone + ' })'));
    }

    ///--------applicationId-------///

  }, {
    key: 'applicationId',
    get: function get() {
      return this.__appId;
    },
    set: function set(appId) {
      throw new Error('Setting \'' + appId + '\' value to Backendless.applicationId directly is not possible, ' + ('instead you must use Backendless.initApp(\'' + appId + '\', API_KEY)'));
    }

    ///--------secretKey-------///

  }, {
    key: 'secretKey',
    get: function get() {
      return this.__apiKey;
    },
    set: function set(apiKey) {
      throw new Error('Setting \'' + apiKey + '\' value to Backendless.secretKey directly is not possible, ' + ('instead you must use Backendless.initApp(APP_ID, \'' + apiKey + '\')'));
    }

    ///--------serverURL-------///

  }, {
    key: 'serverURL',
    get: function get() {
      return this.__serverURL;
    },
    set: function set(serverURL) {
      this.__serverURL = serverURL;
    }

    ///--------appPath-------///

  }, {
    key: 'appPath',
    get: function get() {
      return [this.serverURL, this.applicationId, this.secretKey].join('/');
    },
    set: function set(appPath) {
      throw new Error('Setting \'' + appPath + '\' value to Backendless.appPath directly is not possible, ' + 'instead you must use Backendless.initApp(APP_ID, API_KEY) for setup the value');
    }

    ///--------debugMode-------///

  }, {
    key: 'debugMode',
    get: function get() {
      return this.__debugMode;
    },
    set: function set(debugMode) {
      debugMode = !!debugMode;

      if (this.__debugMode !== debugMode) {
        this.__debugMode = debugMode;
        this.RT.setDebugMode(debugMode);
      }
    }

    ///--------XMLHttpRequestMode-------///

  }, {
    key: 'XMLHttpRequest',
    get: function get() {
      return this.__XMLHttpRequest;
    },
    set: function set(XMLHttpRequest) {
      this.__XMLHttpRequest = XMLHttpRequest;
    }

    ///--------ServerCode-------///

  }, {
    key: 'ServerCode',
    get: function get() {
      return this.__ServerCode;
    },
    set: function set(ServerCode) {
      this.__ServerCode = ServerCode;
    }

    ///--------device-------///

  }, {
    key: 'device',
    get: function get() {
      if (!this.__device) {
        throw new Error('Device is not defined. Please, run the Backendless.setupDevice');
      }

      return this.__device;
    },
    set: function set(props) {
      throw new Error('Setting value to Backendless.device directly is not possible, ' + 'instead you must use Backendless.setupDevice(deviceProperties) for setup the device');
    }
  }, {
    key: 'browser',
    get: function get() {
      return require('./user-agent').getUserAgent();
    }
  }, {
    key: 'Logging',
    get: function get() {
      return this.__getService('Logging');
    }
  }, {
    key: 'Counters',
    get: function get() {
      return this.__getService('Counters');
    }
  }, {
    key: 'Cache',
    get: function get() {
      return this.__getService('Cache');
    }
  }, {
    key: 'Commerce',
    get: function get() {
      return this.__getService('Commerce');
    }
  }, {
    key: 'Users',
    get: function get() {
      return this.__getService('Users');
    }
  }, {
    key: 'User',
    get: function get() {
      return require('./users/user').default;
    }
  }, {
    key: 'BL',
    get: function get() {
      return this.__getService('BL');
    }
  }, {
    key: 'CustomServices',
    get: function get() {
      return this.BL.CustomServices;
    }
  }, {
    key: 'Events',
    get: function get() {
      return this.BL.Events;
    }
  }, {
    key: 'Geo',
    get: function get() {
      return this.__getService('Geo');
    }
  }, {
    key: 'Data',
    get: function get() {
      return this.__getService('Data');
    }
  }, {
    key: 'Messaging',
    get: function get() {
      return this.__getService('Messaging');
    }
  }, {
    key: 'Files',
    get: function get() {
      return this.__getService('Files');
    }
  }, {
    key: 'RT',
    get: function get() {
      return this.__getService('RT');
    }
  }, {
    key: 'SharedObject',
    get: function get() {
      return this.__getService('SharedObject');
    }
  }, {
    key: 'LocalCache',
    get: function get() {
      return this.__getService('LocalCache');
    }

    ///-------------- SERVICES -------------///
    ///-------------------------------------///

    ///-------------------------------------///
    ///--------BACKWARD COMPATIBILITY-------///

    //TODO: do we need to remove it?

  }, {
    key: 'UserService',
    get: function get() {
      return this.Users;
    }
  }, {
    key: 'GeoQuery',
    get: function get() {
      return this.Geo.Query;
    }
  }, {
    key: 'GeoPoint',
    get: function get() {
      return this.Geo.Point;
    }
  }, {
    key: 'GeoCluster',
    get: function get() {
      return this.Geo.Cluster;
    }

    /** @deprecated */

  }, {
    key: 'Persistence',
    get: function get() {
      return this.Data;
    }
  }, {
    key: 'DataQueryBuilder',
    get: function get() {
      return this.Data.QueryBuilder;
    }
  }, {
    key: 'LoadRelationsQueryBuilder',
    get: function get() {
      return this.Data.LoadRelationsQueryBuilder;
    }
  }, {
    key: 'Bodyparts',
    get: function get() {
      return this.Messaging.Bodyparts;
    }
  }, {
    key: 'PublishOptions',
    get: function get() {
      return this.Messaging.PublishOptions;
    }
  }, {
    key: 'DeliveryOptions',
    get: function get() {
      return this.Messaging.DeliveryOptions;
    }
  }, {
    key: 'PublishOptionsHeaders',
    get: function get() {
      return this.Messaging.PublishOptionsHeaders;
    }
  }, {
    key: 'EmailEnvelope',
    get: function get() {
      return this.Messaging.EmailEnvelope;
    }

    /** @deprecated */

  }, {
    key: 'SubscriptionOptions',
    get: function get() {
      return this.Messaging.SubscriptionOptions;
    }

    ///--------BACKWARD COMPATIBILITY-------///
    ///-------------------------------------///

  }]);

  return Backendless;
}();

var backendless = new Backendless(DEFAULT_PROPS);

if (root) {
  root.Backendless = backendless;
}

exports.default = backendless;


module.exports = backendless;