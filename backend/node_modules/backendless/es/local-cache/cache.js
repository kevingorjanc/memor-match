'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Cache = function () {
  function Cache(app) {
    _classCallCheck(this, Cache);

    this.app = app;
    this.__storage = {};
  }

  _createClass(Cache, [{
    key: 'exists',
    value: function exists(key) {
      return this.get(key) !== undefined;
    }
  }, {
    key: 'set',
    value: function set(key, value) {
      return this.storage[key] = this.serialize(value);
    }
  }, {
    key: 'get',
    value: function get(key) {
      var result = this.storage[key];

      return result && this.deserialize(result);
    }
  }, {
    key: 'remove',
    value: function remove(key) {
      return delete this.storage[key];
    }
  }, {
    key: 'clear',
    value: function clear() {
      this.storage = {};
    }
  }, {
    key: 'flushExpired',
    value: function flushExpired() {}
  }, {
    key: 'getCachePolicy',
    value: function getCachePolicy() /** key */{}
  }, {
    key: 'getAll',
    value: function getAll() {
      var result = {};

      for (var key in this.storage) {
        if (this.storage.hasOwnProperty(key)) {
          result[key] = this.get(key);
        }
      }

      return result;
    }
  }, {
    key: 'serialize',
    value: function serialize(value) {
      return JSON.stringify(value);
    }
  }, {
    key: 'deserialize',
    value: function deserialize(value) {
      if (typeof value !== 'string') {
        return undefined;
      }

      try {
        return JSON.parse(value);
      } catch (e) {
        return value || undefined;
      }
    }
  }, {
    key: 'storage',
    get: function get() {
      return this.__storage;
    },
    set: function set(storage) {
      return this.__storage = storage;
    }
  }]);

  return Cache;
}();

exports.default = Cache;