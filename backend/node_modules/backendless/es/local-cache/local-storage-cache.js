'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require('../utils');

var _utils2 = _interopRequireDefault(_utils);

var _cache = require('./cache');

var _cache2 = _interopRequireDefault(_cache);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var STORAGE_KEY_NAMESPACE = 'Backendless';

var composeStorageKey = function composeStorageKey(app) {
  var applicationId = app.applicationId,
      standalone = app.standalone;


  var key = STORAGE_KEY_NAMESPACE;

  if (standalone) {
    key += '-' + applicationId;
  }

  return key;
};

var expired = function expired(obj) {
  if (_utils2.default.isObject(obj)) {
    var withTTL = 'cachePolicy' in obj && 'timeToLive' in obj.cachePolicy && 'created' in obj.cachePolicy && obj.cachePolicy.timeToLive !== -1;

    if (withTTL) {
      var ttl = obj['cachePolicy']['timeToLive'];
      var age = new Date().getTime() - obj['cachePolicy']['created'];

      return age > ttl;
    }
  }

  return false;
};

var addTimestamp = function addTimestamp(obj) {
  if (_utils2.default.isObject(obj)) {
    if ('cachePolicy' in obj && 'timeToLive' in obj['cachePolicy']) {
      obj['cachePolicy']['created'] = new Date().getTime();
    }
  }
};

var LocalStorageCache = function (_Cache) {
  _inherits(LocalStorageCache, _Cache);

  function LocalStorageCache() {
    var _ref;

    _classCallCheck(this, LocalStorageCache);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = LocalStorageCache.__proto__ || Object.getPrototypeOf(LocalStorageCache)).call.apply(_ref, [this].concat(args)));

    _this.__storageKey = composeStorageKey(_this.app);
    _this.__storage = window.localStorage;

    _this.initStorage();
    return _this;
  }

  _createClass(LocalStorageCache, [{
    key: 'initStorage',
    value: function initStorage() {
      if (!this.storage) {
        this.storage = {};
      }
    }
  }, {
    key: 'exists',
    value: function exists(key) {
      return this.get(key) !== undefined;
    }
  }, {
    key: 'set',
    value: function set(key, value) {
      if (value === undefined) {
        return this.remove(key);
      }

      var storage = this.storage;

      addTimestamp(value);

      storage[key] = value;

      this.storage = storage;

      return value;
    }
  }, {
    key: 'get',
    value: function get(key) {
      var storage = this.storage;
      var value = storage[key];

      if (expired(value)) {
        delete storage[key];

        this.storage = storage;

        return;
      }

      if (value && value['cachePolicy']) {
        delete value['cachePolicy'];
      }

      return value;
    }
  }, {
    key: 'remove',
    value: function remove(key) {
      key = key.replace(/([^A-Za-z0-9-])/g, ''); //TODO maybe we have to check always

      var storage = this.storage;

      if (storage.hasOwnProperty(key)) {
        delete storage[key];

        this.storage = storage;
      }
    }
  }, {
    key: 'getAll',
    value: function getAll() {
      var storage = this.storage;
      var result = {};

      for (var key in storage) {
        if (storage.hasOwnProperty(key)) {
          var value = storage[key];

          //TODO maybe we have to filter expired

          if (value !== null && value.hasOwnProperty('cachePolicy')) {
            delete value['cachePolicy'];
          }

          result[key] = value;
        }
      }

      return result;
    }
  }, {
    key: 'flushExpired',
    value: function flushExpired() {
      var storage = this.storage;

      for (var key in storage) {
        if (storage.hasOwnProperty(key)) {
          var value = storage[key];

          if (expired(value)) {
            delete storage[key];
          }
        }
      }

      this.storage = storage;
    }
  }, {
    key: 'getCachePolicy',
    value: function getCachePolicy(key) {
      var storage = this.storage;
      var value = storage[key];

      return value ? value['cachePolicy'] : undefined;
    }
  }, {
    key: 'storage',
    get: function get() {
      return this.deserialize(this.__storage.getItem(this.__storageKey)) || {};
    },
    set: function set(storage) {
      this.__storage.setItem(this.__storageKey, this.serialize(storage));
    }
  }]);

  return LocalStorageCache;
}(_cache2.default);

exports.default = LocalStorageCache;