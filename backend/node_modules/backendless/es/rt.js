'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RTScopeConnector = exports.RTListeners = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _backendlessRtClient = require('backendless-rt-client');

var _backendlessRtClient2 = _interopRequireDefault(_backendlessRtClient);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RTListeners = exports.RTListeners = _backendlessRtClient2.default.Listeners;
var RTScopeConnector = exports.RTScopeConnector = _backendlessRtClient2.default.ScopeConnector;

var RT = function (_BackendlessRTClient) {
  _inherits(RT, _BackendlessRTClient);

  function RT(app) {
    _classCallCheck(this, RT);

    var appId = app.applicationId,
        apiKey = app.secretKey,
        appPath = app.appPath,
        debugMode = app.debugMode;


    var clientId = _utils2.default.uuid();
    var lookupPath = appPath + '/rt/lookup';
    var userToken = app.getCurrentUserToken();

    var _this = _possibleConstructorReturn(this, (RT.__proto__ || Object.getPrototypeOf(RT)).call(this, {
      appId: appId,
      lookupPath: lookupPath,
      debugMode: debugMode,
      connectQuery: function connectQuery() {
        return {
          apiKey: apiKey,
          clientId: clientId,
          userToken: userToken
        };
      }
    }));

    _this.app = app;
    return _this;
  }

  _createClass(RT, [{
    key: 'updateUserTokenIfNeeded',
    value: function updateUserTokenIfNeeded() {
      if (this.session) {
        var userToken = this.app.getCurrentUserToken();

        this.methods.setUserToken({ userToken: userToken });
      }
    }
  }, {
    key: 'setDebugMode',
    value: function setDebugMode(debugMode) {
      this.setConfig({ debugMode: debugMode });
    }
  }]);

  return RT;
}(_backendlessRtClient2.default);

exports.default = RT;