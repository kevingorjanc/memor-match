'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dispatchEvent = dispatchEvent;

var _utils = require('../utils');

var _utils2 = _interopRequireDefault(_utils);

var _async = require('../request/async');

var _async2 = _interopRequireDefault(_async);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function dispatchEvent(eventName, eventArgs, executionType, asyncHandler) {
  if (!eventName || !_utils2.default.isString(eventName)) {
    throw new Error('Event Name must be provided and must be not an empty STRING!');
  }

  if (typeof eventArgs === 'string' && (0, _constants.isExecutionType)(eventArgs)) {
    asyncHandler = executionType;
    executionType = eventArgs;
    eventArgs = undefined;
  }

  if (executionType instanceof _async2.default) {
    asyncHandler = executionType;
    executionType = undefined;
  }

  if (eventArgs instanceof _async2.default) {
    asyncHandler = eventArgs;
    eventArgs = undefined;
  }

  if (!_utils2.default.isObject(eventArgs)) {
    eventArgs = {};
  }

  if (asyncHandler) {
    asyncHandler = _utils2.default.wrapAsync(asyncHandler);
  }

  var headers = {};

  if (executionType) {
    headers[_constants.EXECUTION_TYPE_HEADER] = executionType;
  }

  return this.app.request.post({
    url: this.app.urls.blEvent(eventName),
    data: eventArgs,
    isAsync: !!asyncHandler,
    headers: headers,
    asyncHandler: asyncHandler
  });
}