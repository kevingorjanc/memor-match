'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Constructors;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = function (geoObject, srs) {
  var constructor = Constructors[geoObject.type];
  srs = srs || _spatialReferenceSystem2.default.valueBySRSId(geoObject.srsId);

  if (constructor) {
    return constructor(geoObject.coordinates, srs);
  }

  throw new Error('There is no constructor for ' + geoObject.type);
};

var _point = require('./point');

var _point2 = _interopRequireDefault(_point);

var _linestring = require('./linestring');

var _linestring2 = _interopRequireDefault(_linestring);

var _polygon = require('./polygon');

var _polygon2 = _interopRequireDefault(_polygon);

var _constants = require('./constants');

var _spatialReferenceSystem = require('./spatial-reference-system');

var _spatialReferenceSystem2 = _interopRequireDefault(_spatialReferenceSystem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

var pointConstructor = function pointConstructor(coordinates, srs) {
  var _coordinates = _slicedToArray(coordinates, 2),
      x = _coordinates[0],
      y = _coordinates[1];

  return new _point2.default(srs).setX(x).setY(y);
};

var lineStringConstructor = function lineStringConstructor(coordinates, srs) {
  var points = coordinates.map(function (coordsPair) {
    return pointConstructor(coordsPair, srs);
  });

  return new _linestring2.default(points, srs);
};

var polygonConstructor = function polygonConstructor(coordinates, srs) {
  var lineStrings = coordinates.map(function (lineString) {
    return lineStringConstructor(lineString, srs);
  });

  var _lineStrings = _toArray(lineStrings),
      boundary = _lineStrings[0],
      holes = _lineStrings.slice(1);

  return new _polygon2.default(boundary, holes, srs);
};

var Constructors = (_Constructors = {}, _defineProperty(_Constructors, _constants.GeoTypes.POINT, pointConstructor), _defineProperty(_Constructors, _constants.GeoTypes.LINE_STRING, lineStringConstructor), _defineProperty(_Constructors, _constants.GeoTypes.POLYGON, polygonConstructor), _Constructors);