'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _geometry = require('./geometry');

var _geometry2 = _interopRequireDefault(_geometry);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GEOJSON_TYPE = _constants.GeoTypes.POINT;
var WKT_TYPE = GEOJSON_TYPE.toUpperCase();
var PRECISION = .000000001;

var Point = function (_Geometry) {
  _inherits(Point, _Geometry);

  function Point(srs) {
    _classCallCheck(this, Point);

    return _possibleConstructorReturn(this, (Point.__proto__ || Object.getPrototypeOf(Point)).call(this, srs));
  }

  _createClass(Point, [{
    key: 'getX',
    value: function getX() {
      return this.x;
    }
  }, {
    key: 'getY',
    value: function getY() {
      return this.y;
    }
  }, {
    key: 'getLongitude',
    value: function getLongitude() {
      return this.x;
    }
  }, {
    key: 'getLatitude',
    value: function getLatitude() {
      return this.y;
    }
  }, {
    key: 'setX',
    value: function setX(x) {
      this.x = x;

      return this;
    }
  }, {
    key: 'setY',
    value: function setY(y) {
      this.y = y;

      return this;
    }
  }, {
    key: 'setLongitude',
    value: function setLongitude(x) {
      return this.setX(x);
    }
  }, {
    key: 'setLatitude',
    value: function setLatitude(y) {
      return this.setY(y);
    }

    /**
     * @override
     */

  }, {
    key: 'getGeojsonType',
    value: function getGeojsonType() {
      return GEOJSON_TYPE;
    }

    /**
     * @override
     */

  }, {
    key: 'getWktType',
    value: function getWktType() {
      return WKT_TYPE;
    }

    /**
     * @override
     */

  }, {
    key: 'wktCoordinatePairs',
    value: function wktCoordinatePairs() {
      return this.x + ' ' + this.y;
    }

    /**
     * @override
     */

  }, {
    key: 'jsonCoordinatePairs',
    value: function jsonCoordinatePairs() {
      return [this.x, this.y];
    }
  }, {
    key: 'equals',
    value: function equals(point) {
      if (this === point) {
        return true;
      }

      if (!(point instanceof Point)) {
        return false;
      }

      return Math.abs(point.x - this.x) < PRECISION && Math.abs(point.y - this.y) < PRECISION && this.srs === point.srs;
    }
  }]);

  return Point;
}(_geometry2.default);

exports.default = Point;