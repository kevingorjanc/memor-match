'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SpatialType = function () {
  function SpatialType(_ref) {
    var srsId = _ref.srsId,
        name = _ref.name;

    _classCallCheck(this, SpatialType);

    this.srsId = srsId;
    this.name = name;
  }

  _createClass(SpatialType, [{
    key: 'getSRSId',
    value: function getSRSId() {
      return this.srsId;
    }
  }, {
    key: 'getName',
    value: function getName() {
      return this.name;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.getName() + '(' + this.getSRSId() + ')';
    }
  }]);

  return SpatialType;
}();

var CARTESIAN = new SpatialType({
  srsId: 0,
  name: 'Cartesian'
});

var PULKOVO_1995 = new SpatialType({
  srsId: 4200,
  name: 'Pulkovo 1995'
});

var WGS84 = new SpatialType({
  srsId: 4326,
  name: 'WGS 84'
});

var WGS84_PSEUDO_MERCATOR = new SpatialType({
  srsId: 3857,
  name: 'WGS 84 / Pseudo-Mercator'
});

var WGS84_WORLD_MERCATOR = new SpatialType({
  srsId: 3395,
  name: 'WGS 84 / World Mercator'
});

var SpatialReferenceSystem = {
  CARTESIAN: CARTESIAN,
  PULKOVO_1995: PULKOVO_1995,
  WGS84: WGS84,
  WGS84_PSEUDO_MERCATOR: WGS84_PSEUDO_MERCATOR,
  WGS84_WORLD_MERCATOR: WGS84_WORLD_MERCATOR,
  DEFAULT: WGS84,

  SRS_MAP: {},

  valueBySRSId: function valueBySRSId(srsId) {
    return SpatialReferenceSystem.SRS_MAP[srsId];
  }
};

Object.keys(SpatialReferenceSystem).forEach(function (type) {
  if (SpatialReferenceSystem[type] instanceof SpatialType) {
    var spatialType = SpatialReferenceSystem[type];

    SpatialReferenceSystem.SRS_MAP[spatialType.getSRSId()] = spatialType;
  }
});

exports.default = SpatialReferenceSystem;