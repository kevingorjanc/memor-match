'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.find = find;
exports.findById = findById;
exports.findFirst = findFirst;
exports.findLast = findLast;

var _utils = require('../../utils');

var _utils2 = _interopRequireDefault(_utils);

var _async = require('../../request/async');

var _async2 = _interopRequireDefault(_async);

var _queryBuilder = require('../query-builder');

var _queryBuilder2 = _interopRequireDefault(_queryBuilder);

var _parse = require('./parse');

var _extractQueryOptions = require('./extract-query-options');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//TODO: refactor me

function findUtil(url, Model, dataQuery, asyncHandler) {
  var _this = this;

  dataQuery = dataQuery || {};

  var dataQueryURL = dataQuery.url;

  if (dataQuery instanceof _queryBuilder2.default) {
    dataQuery = dataQuery.build();
  }

  var query = [];

  if (asyncHandler) {
    asyncHandler = _utils2.default.wrapAsync(asyncHandler, function (resp) {
      return (0, _parse.parseFindResponse)(resp, Model, _this.classToTableMap);
    });
  }

  if (dataQuery.options) {
    query.push((0, _extractQueryOptions.extractQueryOptions)(dataQuery.options));
  }

  if (dataQuery.condition) {
    query.push('where=' + encodeURIComponent(dataQuery.condition));
  }

  if (dataQuery.havingClause) {
    query.push('having=' + encodeURIComponent(dataQuery.havingClause));
  }

  if (dataQuery.properties && dataQuery.properties.length) {
    query.push('props=' + _utils2.default.encodeArrayToUriComponent(dataQuery.properties));
  }

  if (dataQueryURL) {
    url += '/' + dataQueryURL;
  }

  if (query.length) {
    url += '?' + query.join('&');
  }

  var result = this.app.request.get({
    url: url,
    isAsync: !!asyncHandler,
    asyncHandler: asyncHandler,
    cachePolicy: dataQuery.cachePolicy
  });

  if (asyncHandler) {
    return result;
  }

  return (0, _parse.parseFindResponse)(result, Model, this.classToTableMap);
}

function find(queryBuilder, asyncHandler) {
  //TODO: add an ability to get object as QueryBuilder

  if (queryBuilder instanceof _async2.default) {
    asyncHandler = queryBuilder;
    queryBuilder = undefined;
  }

  if (queryBuilder && !(queryBuilder instanceof _queryBuilder2.default)) {
    throw new Error('The first argument should be instance of Backendless.DataQueryBuilder');
  }

  var dataQuery = queryBuilder ? queryBuilder.build() : {};
  var url = this.app.urls.dataTable(this.className);

  return findUtil.call(this, url, this.model, dataQuery, asyncHandler, this.classToTableMap);
}

function findById() {
  var _this2 = this;

  var argsObj = void 0;
  var responder = _utils2.default.extractResponder(arguments);

  var url = this.app.urls.dataTable(this.className);

  if (_utils2.default.isString(arguments[0])) {
    argsObj = !(arguments[1] instanceof _async2.default) ? arguments[1] || {} : {};
    argsObj.url = arguments[0];

    if (!argsObj.url) {
      throw new Error('missing argument "object ID" for method findById()');
    }

    return findUtil.call(this, url, this.model, argsObj, responder, this.classToTableMap);
  } else if (_utils2.default.isObject(arguments[0])) {
    argsObj = arguments[0];
    var isAsync = !!responder;
    var send = '/pk?';

    for (var key in argsObj) {
      send += key + '=' + argsObj[key] + '&';
    }

    if (responder) {
      responder = _utils2.default.wrapAsync(responder, function (resp) {
        return (0, _parse.parseFindResponse)(resp, _this2.model);
      });
    }

    var result = void 0;

    if (_utils2.default.getClassName(arguments[0]) === 'Object') {
      result = this.app.request.get({
        url: url + send.replace(/&$/, ''),
        isAsync: isAsync,
        asyncHandler: responder
      });
    } else {
      result = this.app.request.put({
        url: url,
        data: argsObj,
        isAsync: isAsync,
        asyncHandler: responder
      });
    }

    return isAsync ? result : (0, _parse.parseFindResponse)(result, this.model);
  }
}

function findFirst(dataQuery, asyncHandler) {
  if (dataQuery instanceof _async2.default) {
    asyncHandler = dataQuery;
    dataQuery = {};
  }

  dataQuery.url = 'first';

  var url = this.app.urls.dataTable(this.className);

  return findUtil.call(this, url, this.model, dataQuery, asyncHandler, this.classToTableMap);
}

function findLast(dataQuery, asyncHandler) {
  if (dataQuery instanceof _async2.default) {
    asyncHandler = dataQuery;
    dataQuery = {};
  }

  dataQuery.url = 'last';

  var url = this.app.urls.dataTable(this.className);

  return findUtil.call(this, url, this.model, dataQuery, asyncHandler, this.classToTableMap);
}