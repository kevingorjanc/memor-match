'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.savePoint = savePoint;

var _utils = require('../utils');

var _utils2 = _interopRequireDefault(_utils);

var _point = require('./point');

var _point2 = _interopRequireDefault(_point);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function savePoint(geoPoint, asyncHandler) {
  if (!_utils2.default.isNumber(geoPoint.latitude) || !_utils2.default.isNumber(geoPoint.longitude)) {
    throw new Error('Latitude or longitude not a number');
  }

  geoPoint.categories = _utils2.default.castArray(geoPoint.categories || ['Default']);

  if (asyncHandler) {
    asyncHandler = _utils2.default.wrapAsync(asyncHandler, parseResponse);
  }

  var method = geoPoint.objectId ? this.app.request.Methods.PATCH : this.app.request.Methods.POST;

  var url = geoPoint.objectId ? this.app.urls.geoPoint(geoPoint.objectId) : this.app.urls.geoPoints();

  var result = this.app.request.send({
    method: method,
    url: url,
    data: geoPoint,
    isAsync: !!asyncHandler,
    asyncHandler: asyncHandler
  });

  if (asyncHandler) {
    return result;
  }

  return parseResponse(result);
}

function parseResponse(resp) {
  var geoPoint = new _point2.default();

  geoPoint.categories = resp.geopoint.categories;
  geoPoint.latitude = resp.geopoint.latitude;
  geoPoint.longitude = resp.geopoint.longitude;
  geoPoint.metadata = resp.geopoint.metadata;
  geoPoint.objectId = resp.geopoint.objectId;

  return geoPoint;
}