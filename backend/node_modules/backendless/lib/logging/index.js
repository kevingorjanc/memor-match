'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _desc, _value, _class;

var _decorators = require('../decorators/index');

var _collector = require('./collector');

var _collector2 = _interopRequireDefault(_collector);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

var Logging = (_dec = (0, _decorators.deprecated)('Backendless.Logging', 'Backendless.Logging.flush'), (_class = function () {
  function Logging(app) {
    _classCallCheck(this, Logging);

    this.app = app;
    this.loggingCollector = new _collector2.default(app);
  }

  _createClass(Logging, [{
    key: 'getLogger',
    value: function getLogger() {
      var _loggingCollector;

      return (_loggingCollector = this.loggingCollector).getLogger.apply(_loggingCollector, arguments);
    }
  }, {
    key: 'flushSync',
    value: function flushSync() {
      var _loggingCollector2;

      return (_loggingCollector2 = this.loggingCollector).flushSync.apply(_loggingCollector2, arguments);
    }
  }, {
    key: 'flush',
    value: function flush() {
      var _loggingCollector3;

      return (_loggingCollector3 = this.loggingCollector).flush.apply(_loggingCollector3, arguments);
    }
  }, {
    key: 'reset',
    value: function reset() {
      var _loggingCollector4;

      return (_loggingCollector4 = this.loggingCollector).reset.apply(_loggingCollector4, arguments);
    }
  }, {
    key: 'setLogReportingPolicy',
    value: function setLogReportingPolicy() {
      var _loggingCollector5;

      return (_loggingCollector5 = this.loggingCollector).setLogReportingPolicy.apply(_loggingCollector5, arguments);
    }
  }]);

  return Logging;
}(), (_applyDecoratedDescriptor(_class.prototype, 'flushSync', [_dec], Object.getOwnPropertyDescriptor(_class.prototype, 'flushSync'), _class.prototype)), _class));
exports.default = Logging;