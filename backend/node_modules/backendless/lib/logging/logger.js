'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Logger = function () {
  /**
   * @param {string} name
   * @param {LoggingCollector} loggingCollector
   */
  function Logger(name, loggingCollector) {
    _classCallCheck(this, Logger);

    this.name = name;
    this.loggingCollector = loggingCollector;
  }

  _createClass(Logger, [{
    key: 'debug',
    value: function debug(message) {
      return this.loggingCollector.push(this.name, 'DEBUG', message);
    }
  }, {
    key: 'info',
    value: function info(message) {
      return this.loggingCollector.push(this.name, 'INFO', message);
    }
  }, {
    key: 'warn',
    value: function warn(message, exception) {
      return this.loggingCollector.push(this.name, 'WARN', message, exception);
    }
  }, {
    key: 'error',
    value: function error(message, exception) {
      return this.loggingCollector.push(this.name, 'ERROR', message, exception);
    }
  }, {
    key: 'fatal',
    value: function fatal(message, exception) {
      return this.loggingCollector.push(this.name, 'FATAL', message, exception);
    }
  }, {
    key: 'trace',
    value: function trace(message) {
      return this.loggingCollector.push(this.name, 'TRACE', message);
    }
  }]);

  return Logger;
}();

exports.default = Logger;