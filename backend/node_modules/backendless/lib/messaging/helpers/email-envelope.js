'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require('../../utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EmailEnvelope = function () {
  _createClass(EmailEnvelope, null, [{
    key: 'create',


    /**
     *
     * @param {Object} data
     * @returns {EmailEnvelope}
     */
    value: function create(data) {
      return new EmailEnvelope(data);
    }
  }]);

  function EmailEnvelope(data) {
    _classCallCheck(this, EmailEnvelope);

    data = data || {};

    this.addresses = data.addresses || [];
    this.ccAddresses = data.ccAddresses || [];
    this.bccAddresses = data.bccAddresses || [];
    this.query = data.query || null;
  }

  /**
   *
   * @param {Array|String} addresses
   * @returns {EmailEnvelope}
   */


  _createClass(EmailEnvelope, [{
    key: 'setTo',
    value: function setTo(addresses) {
      this.addresses = _utils2.default.castArray(addresses);

      return this;
    }

    /**
     *
     * @param {Array|String} addresses
     * @returns {EmailEnvelope}
     */

  }, {
    key: 'addTo',
    value: function addTo(addresses) {
      this.addresses = this.addresses.concat(_utils2.default.castArray(addresses));

      return this;
    }

    /**
     *
     * @returns {Array} - addresses
     */

  }, {
    key: 'getTo',
    value: function getTo() {
      return this.addresses;
    }

    /**
     *
     * @param {Array|String} addresses
     * @returns {EmailEnvelope}
     */

  }, {
    key: 'setCc',
    value: function setCc(addresses) {

      this.ccAddresses = _utils2.default.castArray(addresses);

      return this;
    }

    /**
     *
     * @param {Array|String} addresses
     * @returns {EmailEnvelope}
     */

  }, {
    key: 'addCc',
    value: function addCc(addresses) {
      this.ccAddresses = this.ccAddresses.concat(_utils2.default.castArray(addresses));

      return this;
    }

    /**
     *
     * @returns {Array} - cc-addresses
     */

  }, {
    key: 'getCc',
    value: function getCc() {
      return this.ccAddresses;
    }

    /**
     *
     * @param {Array|String} addresses
     * @returns {EmailEnvelope}
     */

  }, {
    key: 'setBcc',
    value: function setBcc(addresses) {
      this.bccAddresses = _utils2.default.castArray(addresses);

      return this;
    }

    /**
     *
     * @param {Array|String} addresses
     * @returns {EmailEnvelope}
     */

  }, {
    key: 'addBcc',
    value: function addBcc(addresses) {
      this.bccAddresses = this.bccAddresses.concat(_utils2.default.castArray(addresses));

      return this;
    }

    /**
     *
     * @returns {Array} - bcc-addresses
     */

  }, {
    key: 'getBcc',
    value: function getBcc() {
      return this.bccAddresses;
    }

    /**
     *
     * @param {String|null} query
     * @returns {EmailEnvelope}
     */

  }, {
    key: 'setQuery',
    value: function setQuery(query) {
      this.query = query;

      return this;
    }

    /**
     *
     * @returns {String} - query
     */

  }, {
    key: 'getQuery',
    value: function getQuery() {
      return this.query;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var data = {};

      if (this.addresses.length > 0) {
        data.addresses = this.addresses;
      }

      if (this.ccAddresses.length > 0) {
        data['cc-addresses'] = this.ccAddresses;
      }

      if (this.bccAddresses.length > 0) {
        data['bcc-addresses'] = this.bccAddresses;
      }

      if (this.query) {
        data.criteria = this.query;
      }

      return data;
    }
  }]);

  return EmailEnvelope;
}();

exports.default = EmailEnvelope;