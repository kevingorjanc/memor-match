'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Urls = function () {
  function Urls(app) {
    _classCallCheck(this, Urls);

    this.app = app;
  }

  _createClass(Urls, [{
    key: 'root',
    value: function root() {
      return this.app.appPath;
    }

    //bl

  }, {
    key: 'blServices',
    value: function blServices() {
      return this.root() + '/services';
    }
  }, {
    key: 'blServiceMethod',
    value: function blServiceMethod(name, method) {
      return this.blServices() + '/' + name + '/' + method;
    }
  }, {
    key: 'blEvent',
    value: function blEvent(eventName) {
      return this.root() + '/servercode/events/' + eventName;
    }

    //logging

  }, {
    key: 'logging',
    value: function logging() {
      return this.root() + '/log';
    }

    //cache

  }, {
    key: 'cache',
    value: function cache() {
      return this.root() + '/cache';
    }
  }, {
    key: 'cacheItem',
    value: function cacheItem(key) {
      return this.cache() + '/' + key;
    }
  }, {
    key: 'cacheItemExpireIn',
    value: function cacheItemExpireIn(key) {
      return this.cacheItem(key) + '/expireIn';
    }
  }, {
    key: 'cacheItemExpireAt',
    value: function cacheItemExpireAt(key) {
      return this.cacheItem(key) + '/expireAt';
    }
  }, {
    key: 'cacheItemCheck',
    value: function cacheItemCheck(key) {
      return this.cacheItem(key) + '/check';
    }

    //counters

  }, {
    key: 'counters',
    value: function counters() {
      return this.root() + '/counters';
    }
  }, {
    key: 'counter',
    value: function counter(name) {
      return this.counters() + '/' + name;
    }
  }, {
    key: 'counterAddAndGet',
    value: function counterAddAndGet(name) {
      return this.counter(name) + '/incrementby/get';
    }
  }, {
    key: 'counterGetAndAdd',
    value: function counterGetAndAdd(name) {
      return this.counter(name) + '/get/incrementby';
    }
  }, {
    key: 'counterIncrementAndGet',
    value: function counterIncrementAndGet(name) {
      return this.counter(name) + '/increment/get';
    }
  }, {
    key: 'counterDecrementAndGet',
    value: function counterDecrementAndGet(name) {
      return this.counter(name) + '/decrement/get';
    }
  }, {
    key: 'counterGetAndDecrement',
    value: function counterGetAndDecrement(name) {
      return this.counter(name) + '/get/decrement';
    }
  }, {
    key: 'counterGetAndIncrement',
    value: function counterGetAndIncrement(name) {
      return this.counter(name) + '/get/increment';
    }
  }, {
    key: 'counterCompareAndSet',
    value: function counterCompareAndSet(name) {
      return this.counter(name) + '/get/compareandset';
    }
  }, {
    key: 'counterReset',
    value: function counterReset(name) {
      return this.counter(name) + '/reset';
    }

    //data

  }, {
    key: 'data',
    value: function data() {
      return this.root() + '/data';
    }
  }, {
    key: 'dataTable',
    value: function dataTable(tableName) {
      return this.data() + '/' + tableName;
    }
  }, {
    key: 'dataTableFind',
    value: function dataTableFind(tableName) {
      return this.dataTable(tableName) + '/find';
    }
  }, {
    key: 'dataTableObject',
    value: function dataTableObject(tableName, objectId) {
      return this.dataTable(tableName) + '/' + objectId;
    }
  }, {
    key: 'dataTableObjectRelation',
    value: function dataTableObjectRelation(tableName, objectId, columnName) {
      return this.dataTableObject(tableName, objectId) + '/' + columnName;
    }
  }, {
    key: 'dataTableCount',
    value: function dataTableCount(tableName) {
      return this.dataTable(tableName) + '/count';
    }
  }, {
    key: 'dataTableProps',
    value: function dataTableProps(tableName) {
      return this.dataTable(tableName) + '/properties';
    }
  }, {
    key: 'dataBulkTable',
    value: function dataBulkTable(tableName) {
      return this.data() + '/bulk/' + tableName;
    }
  }, {
    key: 'dataBulkTableDelete',
    value: function dataBulkTableDelete(tableName) {
      return this.dataBulkTable(tableName) + '/delete';
    }
  }, {
    key: 'dataObjectPermission',
    value: function dataObjectPermission(tableName, permissionType, objectId) {
      return this.dataTable(tableName) + '/permissions/' + permissionType + '/' + encodeURIComponent(objectId);
    }

    //messaging

  }, {
    key: 'messaging',
    value: function messaging() {
      return this.root() + '/messaging';
    }
  }, {
    key: 'messagingPush',
    value: function messagingPush() {
      return this.messaging() + '/push';
    }
  }, {
    key: 'messagingPushTemplates',
    value: function messagingPushTemplates(deviceType) {
      return this.messaging() + '/pushtemplates/' + deviceType;
    }
  }, {
    key: 'messagingPushWithTemplate',
    value: function messagingPushWithTemplate(templateName) {
      return this.messagingPush() + '/' + templateName;
    }
  }, {
    key: 'messagingEmail',
    value: function messagingEmail() {
      return this.messaging() + '/email';
    }
  }, {
    key: 'messagingChannel',
    value: function messagingChannel(channel) {
      return this.messaging() + '/' + channel;
    }
  }, {
    key: 'messagingMessage',
    value: function messagingMessage(messageId) {
      return this.messaging() + '/' + messageId;
    }
  }, {
    key: 'messagingRegistrations',
    value: function messagingRegistrations() {
      return this.messaging() + '/registrations';
    }
  }, {
    key: 'messagingRegistrationDevice',
    value: function messagingRegistrationDevice(deviceId) {
      return this.messagingRegistrations() + '/' + deviceId;
    }
  }, {
    key: 'emailTemplate',
    value: function emailTemplate() {
      return this.root() + '/emailtemplate';
    }
  }, {
    key: 'emailTemplateSend',
    value: function emailTemplateSend() {
      return this.emailTemplate() + '/send';
    }

    //geo

  }, {
    key: 'geo',
    value: function geo() {
      return this.root() + '/geo';
    }
  }, {
    key: 'geoRelative',
    value: function geoRelative() {
      return this.geo() + '/relative';
    }
  }, {
    key: 'geoPoints',
    value: function geoPoints() {
      return this.geo() + '/points';
    }
  }, {
    key: 'geoPoint',
    value: function geoPoint(pointId) {
      return this.geoPoints() + '/' + pointId;
    }
  }, {
    key: 'geoPointMetaData',
    value: function geoPointMetaData(pointId) {
      return this.geoPoint(pointId) + '/metadata';
    }
  }, {
    key: 'geoCategories',
    value: function geoCategories() {
      return this.geo() + '/categories';
    }
  }, {
    key: 'geoCategory',
    value: function geoCategory(name) {
      return this.geoCategories() + '/' + name;
    }
  }, {
    key: 'geoClusters',
    value: function geoClusters() {
      return this.geo() + '/clusters';
    }
  }, {
    key: 'geoClusterPoints',
    value: function geoClusterPoints(clusterId) {
      return this.geoClusters() + '/' + clusterId + '/points';
    }
  }, {
    key: 'geoCount',
    value: function geoCount() {
      return this.geo() + '/count';
    }
  }, {
    key: 'geoFences',
    value: function geoFences(geoFence) {
      return this.geo() + '/fences' + (geoFence ? '?geoFence=' + geoFence : '');
    }
  }, {
    key: 'geoFence',
    value: function geoFence(action, geoFenceName) {
      return this.geo() + '/fence/' + action + '?geoFence=' + geoFenceName;
    }

    //commerce

  }, {
    key: 'commerce',
    value: function commerce() {
      return this.root() + '/commerce/googleplay';
    }
  }, {
    key: 'commerceValidate',
    value: function commerceValidate(name, productId, token) {
      return this.commerce() + '/validate/' + name + '/inapp/' + productId + '/purchases/' + token;
    }
  }, {
    key: 'commerceSubCancel',
    value: function commerceSubCancel(name, subId, token) {
      return this.commerce() + '/' + name + '/subscription/' + subId + '/purchases/' + token + '/cancel';
    }
  }, {
    key: 'commerceSubStatus',
    value: function commerceSubStatus(name, subId, token) {
      return this.commerce() + '/' + name + '/subscription/' + subId + '/purchases/' + token;
    }

    //files

  }, {
    key: 'files',
    value: function files() {
      return this.root() + '/files';
    }
  }, {
    key: 'filePath',
    value: function filePath(path) {
      return this.files() + '/' + path;
    }
  }, {
    key: 'fileCopy',
    value: function fileCopy() {
      return this.files() + '/copy';
    }
  }, {
    key: 'fileMove',
    value: function fileMove() {
      return this.files() + '/move';
    }
  }, {
    key: 'fileRename',
    value: function fileRename() {
      return this.files() + '/rename';
    }
  }, {
    key: 'filePermissions',
    value: function filePermissions() {
      return this.files() + '/permissions';
    }
  }, {
    key: 'filePermission',
    value: function filePermission(type, url) {
      return this.filePermissions() + '/' + type + '/' + encodeURIComponent(url);
    }
  }, {
    key: 'fileBinaryPath',
    value: function fileBinaryPath(path) {
      return this.files() + '/binary/' + path;
    }

    //users

  }, {
    key: 'users',
    value: function users() {
      return this.root() + '/users';
    }
  }, {
    key: 'userObject',
    value: function userObject(objectId) {
      return this.users() + '/' + objectId;
    }
  }, {
    key: 'userRegister',
    value: function userRegister() {
      return this.users() + '/register';
    }
  }, {
    key: 'userLogin',
    value: function userLogin() {
      return this.users() + '/login';
    }
  }, {
    key: 'userLogout',
    value: function userLogout() {
      return this.users() + '/logout';
    }
  }, {
    key: 'userRoles',
    value: function userRoles() {
      return this.users() + '/userroles';
    }
  }, {
    key: 'userRoleOperation',
    value: function userRoleOperation(operation) {
      return this.users() + '/' + operation;
    }
  }, {
    key: 'userClassProps',
    value: function userClassProps() {
      return this.users() + '/userclassprops';
    }
  }, {
    key: 'userRestorePassword',
    value: function userRestorePassword(email) {
      return this.users() + '/restorepassword/' + encodeURIComponent(email);
    }
  }, {
    key: 'userTokenCheck',
    value: function userTokenCheck(token) {
      return this.users() + '/isvalidusertoken/' + token;
    }
  }, {
    key: 'userResendConfirmation',
    value: function userResendConfirmation(email) {
      return this.users() + '/resendconfirmation/' + email;
    }
  }, {
    key: 'userSocial',
    value: function userSocial() {
      return this.users() + '/social';
    }
  }, {
    key: 'userSocialOAuth',
    value: function userSocialOAuth(socialType) {
      return this.userSocial() + '/oauth/' + socialType.toLowerCase() + '/request_url';
    }
  }, {
    key: 'userSocialLogin',
    value: function userSocialLogin(socialType) {
      return this.userSocial() + '/' + socialType.toLowerCase() + '/sdk/login';
    }
  }]);

  return Urls;
}();

exports.default = Urls;