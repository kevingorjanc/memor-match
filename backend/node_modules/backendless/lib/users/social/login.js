'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loginSocial = loginSocial;

var _utils = require('../../utils');

var _utils2 = _interopRequireDefault(_utils);

var _async = require('../../request/async');

var _async2 = _interopRequireDefault(_async);

var _utils3 = require('../utils');

var _container = require('./container');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function loginSocial(socialType, fieldsMapping, permissions, container, stayLoggedIn, asyncHandler) {
  var socialContainer = new _container.SocialContainer(socialType, container);
  var serverURL = this.app.serverURL;

  asyncHandler = _utils2.default.extractResponder(arguments);
  asyncHandler = _utils3.wrapAsync.call(this, asyncHandler, stayLoggedIn);

  addWindowEventListener('message', window, function (e) {
    if (e.origin === serverURL) {
      var result = JSON.parse(e.data);

      if (result.fault) {
        asyncHandler.fault(result.fault);
      } else {
        asyncHandler.success(result);
      }

      removeWindowEventListener('message', window);
      socialContainer.closeContainer();
    }
  });

  var interimCallback = new _async2.default(function (r) {
    socialContainer.doAuthorizationActivity(r);
  }, function (e) {
    socialContainer.closeContainer();
    asyncHandler.fault(e);
  });

  var request = {};
  request.fieldsMapping = fieldsMapping || {};
  request.permissions = permissions || [];

  this.app.request.post({
    url: this.app.urls.userSocialOAuth(socialType),
    isAsync: true,
    asyncHandler: interimCallback,
    data: request
  });
}

function addWindowEventListener(event, elem, func) {
  if (elem.addEventListener) {
    elem.addEventListener(event, func, false);
  } else if (elem.attachEvent) {
    elem.attachEvent('on' + event, func);
  } else {
    elem[event] = func;
  }
}

function removeWindowEventListener(event, elem) {
  if (elem.removeEventListener) {
    elem.removeEventListener(event, null, false);
  } else if (elem.detachEvent) {
    elem.detachEvent('on' + event, null);
  }

  elem[event] = null;
}