'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseResponse = parseResponse;
exports.getUserFromResponse = getUserFromResponse;
exports.wrapAsync = wrapAsync;

var _utils = require('../utils');

var _utils2 = _interopRequireDefault(_utils);

var _async = require('../request/async');

var _async2 = _interopRequireDefault(_async);

var _user = require('./user');

var _user2 = _interopRequireDefault(_user);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parseResponse(data, stayLoggedIn) {
  var user = new _user2.default();

  _utils2.default.deepExtend(user, data);

  if (stayLoggedIn) {
    this.app.LocalCache.set('stayLoggedIn', stayLoggedIn);
  }

  return user;
}

function getUserFromResponse(user) {
  this.app.LocalCache.set('current-user-id', user.objectId);

  var userToken = user['user-token'];

  if (userToken && this.app.LocalCache.get('stayLoggedIn')) {
    this.app.LocalCache.set('user-token', userToken);
  }

  return new _user2.default(user);
}

function wrapAsync(asyncHandler, stayLoggedIn) {
  var context = this;

  var success = function success(data) {
    context.setLocalCurrentUser(parseResponse.call(context, _utils2.default.tryParseJSON(data), stayLoggedIn));

    asyncHandler.success(getUserFromResponse.call(context, context.getLocalCurrentUser()));
  };

  var error = function error(data) {
    asyncHandler.fault(data);
  };

  return new _async2.default(success, error);
}